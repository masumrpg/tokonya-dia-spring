version: '3.8'

services:
  app:
    container_name: app-container
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      SERVER_PORT: 8080
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_IN_MINUTES: 60
      JWT_ISSUER: Tokonya Dia API
      REFRESH_TOKEN_EXPIRATION_IN_HOUR: 24
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      USERNAME_ADMIN: ${ADMIN_USERNAME}
      PASSWORD_ADMIN: ${ADMIN_PASSWORD}
      MENU_IMAGE_PATH: /app/images
      MIDTRANS_APP_URL: ${MIDTRANS_APP_URL}
      MIDTRANS_API_URL: ${MIDTRANS_API_URL}
      MIDTRANS_SERVER_KEY: ${MIDTRANS_SERVER_KEY}
    ports:
      - "8080:8080"
    depends_on:
      - db
      - redis
    volumes:
      - ./images:/app/images
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - frontend-network
      - backend-network
    restart: unless-stopped

  db:
    container_name: db-container
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network
    restart: unless-stopped

  redis:
    container_name: redis-container
    image: redis:7-alpine
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-network
    restart: unless-stopped

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
    internal: true

volumes:
  pgdata:
    driver: local